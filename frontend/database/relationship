tạo 5 bảng constart, department, grant, position, work_shift
nhập dữ liệu cũng đc
ALTER TABLE employee
  ADD CONSTRAINT fk_employee_work_shift
  FOREIGN KEY (id_work_shift) REFERENCES work_shift(id_work_shift)
  ON DELETE SET NULL
  ON UPDATE CASCADE;

ALTER TABLE employee
  ADD CONSTRAINT fk_employee_position
  FOREIGN KEY (id_position) REFERENCES position(id_position)
  ON DELETE SET NULL
  ON UPDATE CASCADE;

ALTER TABLE employee
  ADD CONSTRAINT fk_employee_grant
  FOREIGN KEY (id_grant) REFERENCES grant(id_grant)
  ON DELETE SET NULL
  ON UPDATE CASCADE;

ALTER TABLE employee
  ADD CONSTRAINT fk_employee_department
  FOREIGN KEY (id_department) REFERENCES department(id_department)
  ON DELETE SET NULL
  ON UPDATE CASCADE;

ALTER TABLE employee
  ADD CONSTRAINT fk_employee_contrast
  FOREIGN KEY (id_constrast) REFERENCES contrast(id_constrast)
  ON DELETE SET NULL
  ON UPDATE CASCADE;

--Tạo money với user với money
ALTER TABLE `money`
ADD CONSTRAINT `fk_money_user`
FOREIGN KEY (`id_user`) REFERENCES `user`(`id_user`)
ON DELETE CASCADE
ON UPDATE CASCADE;

--Tạo employee với stock
ALTER TABLE doancuacuong.stock
ADD CONSTRAINT fk_stock_employee
FOREIGN KEY (id_employee) REFERENCES doancuacuong.employee(id_employee)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết Order với User
ALTER TABLE doancuacuong.`Order`
ADD CONSTRAINT fk_order_user
FOREIGN KEY (id_user) REFERENCES doancuacuong.`user`(id_user)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết Order với Voucher
ALTER TABLE doancuacuong.`Order`
ADD CONSTRAINT fk_order_voucher
FOREIGN KEY (id_voucher) REFERENCES doancuacuong.voucher(id_voucher)
ON DELETE SET NULL
ON UPDATE CASCADE;

-- Liên kết comment với bảng user
ALTER TABLE doancuacuong.comment
ADD CONSTRAINT fk_comment_user
FOREIGN KEY (id_user) REFERENCES doancuacuong.user(id_user)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết comment với bảng product
ALTER TABLE doancuacuong.comment
ADD CONSTRAINT fk_comment_product
FOREIGN KEY (id_product) REFERENCES doancuacuong.product(id_product)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng product với bảng stock
ALTER TABLE doancuacuong.product
ADD CONSTRAINT fk_product_stock
FOREIGN KEY (id_stock) REFERENCES doancuacuong.stock(id_stock)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng product với bảng provide
ALTER TABLE doancuacuong.product
ADD CONSTRAINT fk_product_provide
FOREIGN KEY (id_provide) REFERENCES doancuacuong.provide(id_provide)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng list_use_voucher với user
ALTER TABLE doancuacuong.list_use_vouchuer
ADD CONSTRAINT fk_list_user_user
FOREIGN KEY (id_user) REFERENCES doancuacuong.user(id_user)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng list_use_voucher với voucher
ALTER TABLE doancuacuong.list_use_vouchuer
ADD CONSTRAINT fk_list_user_voucher
FOREIGN KEY (id_voucher) REFERENCES doancuacuong.voucher(id_voucher)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng order_import_provide với provide
ALTER TABLE doancuacuong.order_import_provide
ADD CONSTRAINT fk_order_import_provide_provide
FOREIGN KEY (id_provide) REFERENCES doancuacuong.provide(id_provide)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng order_import_provide với stock
ALTER TABLE doancuacuong.order_import_provide
ADD CONSTRAINT fk_order_import_provide_stock
FOREIGN KEY (id_stock) REFERENCES doancuacuong.stock(id_stock)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng order_import_provide với provide
ALTER TABLE doancuacuong.order_export_provide
ADD CONSTRAINT fk_order_export_provide_provide
FOREIGN KEY (id_provide) REFERENCES doancuacuong.provide(id_provide)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết bảng order_import_provide với stock
ALTER TABLE doancuacuong.order_export_provide
ADD CONSTRAINT fk_order_export_provide_stock
FOREIGN KEY (id_stock) REFERENCES doancuacuong.stock(id_stock)
ON DELETE CASCADE
ON UPDATE CASCADE;

ALTER TABLE doancuacuong.product
ADD CONSTRAINT fk_product_employee
FOREIGN KEY (id_employee) REFERENCES doancuacuong.employee(id_employee)
ON DELETE SET NULL
ON UPDATE CASCADE;

thiết lâp liên kết giữa 5 bảng vs bảng nhân viên, sau đó ms nhập dữ liệu cho nhân viên
tạo bảng emplo

6
CSKH,DA, FN, HC, HR, IT, KD, KT, MK, NCPT, QA, QHQT

-- cart vs user
ALTER TABLE doancuacuong.cart
ADD CONSTRAINT fk_cart_user
FOREIGN KEY (id_user)
REFERENCES doancuacuong.user(id_user)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết cho admin_feedback
ALTER TABLE `doancuacuong`.`admin_feedback`
ADD CONSTRAINT `fk_admin_comment`
FOREIGN KEY (`id_comment`) REFERENCES `doancuacuong`.`comment`(`id_comment`)
ON DELETE CASCADE ON UPDATE CASCADE;

-- Liên kết cho user_feedback
ALTER TABLE `doancuacuong`.`user_feedback`
ADD CONSTRAINT `fk_user_comment`
FOREIGN KEY (`id_comment`) REFERENCES `doancuacuong`.`comment`(`id_comment`)
ON DELETE CASCADE ON UPDATE CASCADE;

-- Liên kết cho admin_feed với employee
ALTER TABLE `doancuacuong`.`admin_feedback`
ADD CONSTRAINT `fk_admin_employee`
FOREIGN KEY (`id_employee`) REFERENCES `doancuacuong`.`employee`(`id_employee`)
ON DELETE CASCADE
ON UPDATE CASCADE;

-- Liên kết cho user_feed với user
ALTER TABLE `doancuacuong`.`user_feedback`
ADD CONSTRAINT `fk_userfeedback_user`
FOREIGN KEY (`id_user`) REFERENCES `doancuacuong`.`user`(`id_user`)
ON DELETE CASCADE
ON UPDATE CASCADE;


sắp xếp ở 
// store/index.js
export default {
  state: () => ({
    sortBy: 'price_asc', // điều kiện sắp xếp hiện tại
    products: [
      { id: 1, name: 'Bánh mì', price: 10000 },
      { id: 2, name: 'Sữa', price: 20000 },
      { id: 3, name: 'Cà phê', price: 15000 }
    ]
  }),
  mutations: {
    SET_SORT_BY(state, value) {
      state.sortBy = value;
    }
  },
  getters: {
    sortedProducts: (state) => {
      const products = [...state.products];
      switch (state.sortBy) {
        case 'price_asc':
          return products.sort((a, b) => a.price - b.price);
        case 'price_desc':
          return products.sort((a, b) => b.price - a.price);
        case 'name_asc':
          return products.sort((a, b) => a.name.localeCompare(b.name));
        case 'name_desc':
          return products.sort((a, b) => b.name.localeCompare(a.name));
        default:
          return products;
      }
    }
  }
};
