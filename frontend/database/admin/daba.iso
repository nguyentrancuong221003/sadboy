// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs


Table provides {
  id int [pk, increment]  
  code varchar(15) unique
  name varchar(70)
  phone varchar(10) unique
  address varchar(100)
  email varchar(100) unique
  img varchar(100)
  note varchar(200)
  status varchar(15)
  created_at timestamp
  updated_at timestamp
  created_by varchar(100)
  updated_by varchar(100)
  deleted_at timestamp
}

Table provideDetails {
  provide_id int [primary key]
  total_order int
  return_order int
  total_buy float 
  total_debt float
  bank varchar(30)
  account_name varchar(100)
  account_phone varchar(30)
  qr_img varchar(50)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Ref: "provideDetails"."provide_id" < "provides"."id"

Table productProvideSupply {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(100)
  img varchar(100)
  price json
  description varchar(255)
  provide_id int
  created_at timestamp
  updated_at timestamp
}

Ref: "provides"."id" < "productProvideSupply"."id"

Table products {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(100)
  imgs json
  category_id varchar(50)
  place varchar(70)
  star float
  gift varchar(5)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Table categories {
  id int [pk, increment]
  code varchar(30)
  name varchar(50)
  created_at timestamp
  updated_at timestamp
}
Table productDetails {
  product_id int
  import_price json
  original_price json
  sale_price json 
  sort_description varchar(300)
  long_description varchar(100)
  count_comment int
  OR varchar(30)
  proportion_discount int
  date_start_sale datetime
  date_end_sale datetime
  count_stock int
  count_sale int
  status varchar(15)
  unit varchar(7)
  stock_id int
  created_at timestamp
  updated_at timestamp
  created_by varchar(100)
  updated_by varchar(100)
  deleted_at timestamp
}

Ref: "products"."category_id" < "categories"."id"
Ref: "products"."id" < "productDetails"."product_id"

Table product_provide {
  id int [pk, increment]
  product_id int
  provide_id int
  created_at timestamp
  updated_at timestamp

}

Ref: "provides"."id" < "product_provide"."provide_id"
Ref: "products"."id" < "product_provide"."product_id"

Table positions {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(50)
  status varchar(15)
  description varchar(200)
  
}

Table grants {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(50)
  status varchar(15)
  description varchar(200)
}

Table contrasts {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(50)
  status varchar(15)
  description varchar(200)
}

Table departments {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(50)
  status varchar(15)
  description varchar(200)
}

Table workShifts {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(50)
  status varchar(15)
  description varchar(200)
}

Table employees {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(100)
  email varchar(100) unique
  phone varchar(10) unique
  img varchar(200)
  address varchar(255)
  gender varchar(4)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Table EmployeeDetails {
  employee_id int
  date_birth datetime
  date_start_work datetime
  salary float 
  diploma varchar(20)
  status varchar(20)
  password varchar(150)
  date_sign_contrast date
  date_effect_contrast date
  date_end_contrast date
  work_shift_id int
  position_id int
  department_id int
  grant_id int
  contrast_id int
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Ref: "EmployeeDetails"."work_shift_id" < "workShifts"."id"
Ref: "EmployeeDetails"."department_id" < "departments"."id"
Ref: "EmployeeDetails"."grant_id" < "grants"."id"
Ref: "EmployeeDetails"."contrast_id" < "contrasts"."id"
Ref: "EmployeeDetails"."position_id" < "positions"."id"
Ref: "employees"."id" < "EmployeeDetails"."employee_id"

Table users {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(150)
  email varchar(150) unique
  img varchar(150)
  phone varchar(10)
  gender varchar(5)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Table userDetails {
  user_id int
  status varchar(15)
  date_birth date 
  date_create_account datetime
  money_spend float
  type varchar(15)
  number_carts int
  total_order int
  total_order_cancel int
  total_order_success int
  comment_count int
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Ref: "userDetails"."user_id" < "users"."id"

Table vouchers {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(100)
  img varchar(100)
  type varchar(15)
  percent float
  max_money float
  money_discount float
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Table voucherDetails {
  voucher_id int
  total_user int
  count_use int
  per_use int
  order_price_smallest float
  user_apply varchar(15)
  category_id int
  date_effect datetime
  date_end datetime
  status varchar(15)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}
Table user_voucher {
  id int [pk, increment]
  user_id int 
  voucher_id int
  created_at timestamp
  updated_at timestamp
}
Ref: "voucherDetails"."voucher_id" < "vouchers"."id"
Ref: "users"."id" < "user_voucher"."user_id"
Ref: "vouchers"."id" < "user_voucher"."voucher_id"

Table voucherUsages {
  id int [pk, increment]
  code varchar(15) unique
  voucher_id int
  user_id int
  order_id int
  created_at timestamp
  updated_at timestamp
}

Table orders {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(255)
  date_delivery datetime
  products json
  status varchar(15)
  count int
  total float
  user_id int
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Table orderDetails {
  order_id int
  address var(255)
  pay varchar(15)
  discount_code varchar(15)
  unit_shippng varchar(15)
  note varchar(500)
  note_cancel varchar(500)
  subtotal float
  money_discount float
  money_ship float
  paid float
  
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

}

Table order_statuses {
  id int [pk, increment]
  code varchar(15)
  order_id int
  status varchar(80)
  location varchar(80)
  note varchar(300)
  created_at timestamp
  updated_at timestamp
}

Ref: "orderDetails"."order_id" < "orders"."id"
Ref: "orders"."id" < "voucherUsages"."order_id"
Ref: "vouchers"."id" < "voucherUsages"."voucher_id"
Ref: "users"."id" < "voucherUsages"."user_id"
Ref: "orders"."user_id" < "users"."id"
Ref: "order_statuses"."order_id" < "orders"."id"

Table comments {
  id int [pk, increment]
  code varchar(15) unique
  content varchar(600)
  imgs json
  likes int
  dislikes int
  star int
  parent_id int
  product_id int
  user_id int
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Ref: "users"."id" < "comments"."user_id"
Ref: "products"."id" < "comments"."product_id"

Table stocks {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(255)
  address varchar(255)
  phone varchar(10)
  email varchar(255)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Table goodsReceipt {
  id int [pk, increment]
  code varchar(15) unique
  count int
  date_receive datetime
  discount float
  employee_id int
  note varchar(300)
  note_cancel varchar(300)
  other_cost float
  products json
  provide_id int
  stock_id int
  subtotal float
  total float
  status varchar(15)
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Ref: "provides"."id" < "goodsReceipt"."provide_id"
Ref: "stocks"."id" < "goodsReceipt"."stock_id"
Ref: "employees"."id" < "goodsReceipt"."employee_id"

Table debtProvides {
  id int [pk, increment]
  code varchar(15) unique
  date date
  initial_debt float //toàn bộ nợ của nhà cung cấp
  debt_arises float // chi phí đăt hàng
  debt_paid float // tiền đã thanh toán
  debt_final float // số nợ còn lại
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Table debtProvidesMonth {
  id int [pk, increment]
  code varchar(15) unique
  date  date
  total float
  description varchar(255)
  created_at timestamp
  updated_at timestamp 
}
Table provideOrderMonth {
  id int [pk, increment]
  code varchar(15) unique
  date date
  count float
  description varchar(255)
  created_at timestamp
  updated_at timestamp 
}

Table incomeSpend {
  id int [pk, increment]
  code varchar(15) unique
  date date
  opening_balance float
  money_in float
  money_out float
  profitable float
  profit_order float
  profit_vote float
  created_at timestamp
  updated_at timestamp
  deleted_at timestamp
}

Table billCollectSpend {
  id int [pk, increment]
  code varchar(15) unique
  type varchar(15)
  reason varchar(400)
  money float
  imgs varchar(600)
  object varchar(15)
  name_object varchar(255)
  created_at timestamp
  updated_at timestamp
  created_by timestamp
  updated_by timestamp
  deleted_at timestamp
}

Table announces {
  id int [pk, increment]
  code varchar(15) unique
  name varchar(150)
  img varchar(300)
  content varchar(500)
  user_id int
  created_at timestamp
  updated_at timestamp
}

Ref: "users"."id" < "announces"."user_id"

Table conversations {
  id int [pk, increment]
  user_id int
  employee_id int
  created_at timestamp
  updated_at timestamp
}

Table messages {
  id int [pk, increment]
  conversation_id int
  sender_id int
  sender_type varchar(15) //ENUM('user', 'admin')
  type varchar(15) //ENUM('text', 'image', 'video', 'product', 'order') NOT NULL,
  content text
  file_path varchar(255)
  meta_data json
  
  created_at timestamp
  updated_at timestamp
}

Ref: "messages"."conversation_id" < "conversations"."id"
Ref: "employees"."id" < "conversations"."employee_id"
Ref: "users"."id" < "conversations"."user_id"


Bảng orders (đơn hàng)

orders
- id (PK)
- code (mã đơn hàng)
- user_id (người đặt)
- status (trạng thái cuối cùng: pending, shipping, delivered,...)
- created_at
- updated_at


Bảng order_statuses (các chặng vận chuyển của đơn hàng)

order_statuses
- id (PK)
- order_id (FK -> orders.id)
- status (string: placed, processing, arrived_hub, out_for_delivery, delivered, canceled...)
- location (nullable, vd: "Kho Hà Nội", "Kho Đà Nẵng")
- note (nullable, vd: "Đơn hàng đang chờ phân loại")
- created_at (thời gian cập nhật)


1. Bảng conversations (xác định cặp user ↔ admin)
CREATE TABLE conversations (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT NOT NULL,
    admin_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Mỗi conversation đại diện cho một cuộc trò chuyện giữa 1 user và 1 admin.
Nếu user chat với nhiều admin khác nhau → sẽ có nhiều record trong bảng này.

CREATE TABLE messages (
    id              BIGINT AUTO_INCREMENT PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    sender_id       BIGINT NOT NULL,   -- ai gửi (user_id hoặc admin_id)
    sender_type     ENUM('user', 'admin') NOT NULL, -- phân biệt user với admin
    type            ENUM('text', 'image', 'video', 'product', 'order') NOT NULL,
    content         TEXT NULL,
    file_path       VARCHAR(255) NULL,
    meta_data       JSON NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
conversations
id	user_id	admin_id	created_at
1	  25	    12	      2025-09-01 11:30:00
2	  26	    12	      2025-09-01 11:40:00
messages
id	conversation_id	sender_id	sender_type	type	content	            created_at
1	  1	              25	      user	      text	"Em cần hỗ trợ"	    2025-09-01 11:34:56
2	  1	              12	      admin	      text	"Ok, bạn cần gì?"	  2025-09-01 11:35:12
3	  1	              25	      user	      image	NULL	              2025-09-01 11:36:00

kiểm tra type để render

Tương tự, nhưng type = order và meta_data chứa info của đơn hàng:
{
  "id": 102,
  "conversation_id": 9,
  "sender_id": 2,
  "type": "order",
  "content": null,
  "meta_data": {
    "order_id": "ORD_2025_0001",
    "status": "Đang vận chuyển",
    "total": 450000,
    "products": [
      {
        "name": "Giày sneaker",
        "qty": 1,
        "price": 300000,
        "image": "/storage/products/shoes.png"
      },
      {
        "name": "Áo sơ mi",
        "qty": 2,
        "price": 150000,
        "image": "/storage/products/shirt.png"
      }
    ],
    "link": "/account/orders/ORD_2025_0001"
  }
}


product
{
  "id": 101,
  "conversation_id": 9,
  "sender_id": 2,
  "type": "product",
  "content": null,
  "meta_data": {
    "product_id": 55,
    "name": "Áo thun nam basic",
    "price": 120000,
    "image": "/storage/products/p55.jpg",
    "link": "/product/55"
  }
}

thẻ transition dùng để chỉnh hiệu ứng cho đối tượng bên trong khá hay
                                <transition
  enter-active-class="transition duration-300 ease-out"
  enter-from-class="opacity-0 translate-y-5 scale-95"
  enter-to-class="opacity-100 translate-y-0 scale-100"
  leave-active-class="transition duration-200 ease-in"
  leave-from-class="opacity-100 translate-y-0 scale-100"
  leave-to-class="opacity-0 translate-y-5 scale-95"
>
  <div
    v-if="show_product"
    @click.stop
    class="absolute bottom-7 bg-gray-200 h-70 w-90 right-1/2 translate-x-1/2 z-50 shadow-lg shadow-black rounded-md"
  >







  protected static function newFactory()
    {
        return ProvideFactory::new();
    }


    <?php

use Illuminate\Support\Facades\Route;
use Modules\Admin\Product\src\Models\Product;
use Modules\Admin\Order\src\Models\Order;
use Modules\Admin\Provide\src\Models\ProductProvideSupply;
use Modules\Admin\Provide\src\Models\ProvideDetails;
Route::get('/product1', function () {
    $products = Product::with('detail')->first();

    return response()->json($products, 200, [],JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

});
